{"is_source_file": true, "format": "Dart", "description": "This file defines a mock API client for a Flutter-based expense tracking application. It mimics network requests and responses, serving mock data from an in-memory database for testing or development purposes.", "external_files": ["../mock/mock_data.dart", "package:flutter_dotenv/flutter_dotenv.dart"], "external_methods": ["dotenv.env['API_BASE_URL']", "MockDB.instance.seedIfNeeded()", "MockDB.instance", "MockDB.instance.dashboard", "MockDB.instance.transactions", "MockDB.instance.budgets", "MockDB.instance.goals", "MockDB.instance.alerts", "MockDB.instance.monthlyTotals", "MockDB.instance.categoryBreakdown", "MockDB.instance.createTransaction", "MockDB.instance.createBudget", "MockDB.instance.createGoal", "MockDB.instance.markAlertRead", "MockDB.instance.updateTransaction", "MockDB.instance.updateBudget", "MockDB.instance.updateGoal", "MockDB.instance.deleteTransaction"], "published": ["MockApiClient", "MockApiClient.getJson", "MockApiClient.postJson", "MockApiClient.putJson", "MockApiClient.delete"], "classes": [{"name": "MockApiClient", "description": "A mock implementation of an API client that mimics network requests for various endpoints, fetching and manipulating data from a mock database."}], "methods": [{"name": "MockApiClient._internal", "description": "Private constructor initializing the singleton instance and seeding the mock database if needed."}, {"name": "MockApiClient.factory", "description": "Factory constructor returning the singleton instance."}, {"name": "MockApiClient.get baseUrl", "description": "Retrieves the base URL for API requests, falling back to a default mock URL if environment variable is not set."}, {"name": "MockApiClient._delay", "description": "Simulates network latency by delaying the return of the provided value."}, {"name": "MockApiClient.getJson", "description": "Handles GET requests to various mock endpoints, returning mock data accordingly."}, {"name": "MockApiClient.postJson", "description": "Handles POST requests for creating new mock data entries such as transactions, budgets, and goals."}, {"name": "MockApiClient.putJson", "description": "Handles PUT requests for updating existing mock data entries."}, {"name": "MockApiClient.delete", "description": "Handles DELETE requests to remove mock data entries."}], "calls": ["dotenv.env['API_BASE_URL']", "MockDB.instance.seedIfNeeded()", "MockDB.instance.dashboard", "MockDB.instance.transactions", "MockDB.instance.budgets", "MockDB.instance.goals", "MockDB.instance.alerts", "MockDB.instance.monthlyTotals", "MockDB.instance.categoryBreakdown", "MockDB.instance.createTransaction", "MockDB.instance.createBudget", "MockDB.instance.createGoal", "MockDB.instance.markAlertRead", "MockDB.instance.updateTransaction", "MockDB.instance.updateBudget", "MockDB.instance.updateGoal", "MockDB.instance.deleteTransaction"], "search-terms": ["MockApiClient", "mock network requests", "mock database", "simulate latency", "flutter_dotenv", "mock endpoints", "mock data responses", "API_BASE_URL"], "state": 2, "file_id": 30, "knowledge_revision": 65, "git_revision": "", "hash": "6214571e38289fecdae14827a8af9088", "format-version": 4, "code-base-name": "expense_frontend", "filename": "expense_frontend/lib/api/mock_client.dart", "revision_history": [{"65": ""}]}